name: Build Sample
on: [push, pull_request]

jobs:
  build-win:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, ARM64]
        target: [Windows]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DCMAKE_SYSTEM_NAME=${{ matrix.target }} -DCMAKE_SYSTEM_VERSION="10.0" -G Ninja ..
      - name: Build
        run: cmake --build build --target sdl-template --config Release
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: sdl-template-${{ matrix.target }}-${{ matrix.arch }}
          path: |
            build/*.exe
            build/*.dll
  build-ubuntu:
    name: Ubuntu Build
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, ARM64]
        target: ["Linux"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
      - name: Update package list
        run: sudo apt-get update
      - name: Install x11
        run: sudo apt-get install -y build-essential git make \
          libasound2-dev libpulse-dev \
          libsndio-dev libx11-dev libxext-dev \
          libxfixes-dev libxi-dev libxss-dev \
          libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
          libibus-1.0-dev libudev-dev fcitx-libs-dev
      - name: Build and Package
        run: |
          mkdir build && cd build
          cmake -DCMAKE_SYSTEM_NAME=${{ matrix.target }} -DCMAKE_SYSTEM_VERSION="10.0" ..
          cmake --build ./ --target install --config Release
          cpack -C Release
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: sdl-template-${{ matrix.target }}-${{ matrix.arch }}
          path: |
            ./build/*.tar.gz

  build-mac:
    name: MacOS Build
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        target: ["Darwin"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: "15.3"
      - name: Configure
        run: |
          mkdir -p build 
          mkdir -p build/mac
          cd build/mac
          cmake -G "Xcode" -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO -DCMAKE_SYSTEM_NAME=${{ matrix.target }} -S ../..
      - name: Build
        run: |
          cd build/mac
          cmake --build ./ --target install --config Release
      - name: Create DMG
        run: |
          cd build/mac
          cpack -G DragNDrop -C Release
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: sdl-template-apple-${{ matrix.target }}
          path: |
            ./build/mac/*.dmg
  # build-ios:
  #   name: iOS Build
  #   runs-on: macos-14

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Setup Xcode version
  #       uses: maxim-lobanov/setup-xcode@v1.6.0
  #       with:
  #         xcode-version: "15.3"
  #     - name: Configure
  #       run: |
  #         mkdir -p build
  #         mkdir -p build/ios
  #         cd build/ios
  #         cmake -G "Xcode" -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_SYSROOT=iphoneos -S ../..
  # - name: Build
  #   run: |
  #     cd build/ios
  #     cmake --build ./ --target sdl-template --config Release
  # build-ios-simulator:
  #   name: iOS Simulator Build
  #   runs-on: macos-14

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Setup Xcode version
  #       uses: maxim-lobanov/setup-xcode@v1.6.0
  #       with:
  #         xcode-version: "15.3"
  #     - name: Configure
  #       run: |
  #         mkdir -p build
  #         mkdir -p build/ios
  #         cd build/ios
  #         cmake -G "Xcode" -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_SYSROOT=iphonesimulator -S ../..
  # - name: Build
  #   run: |
  #     cd build/ios
  #     cmake --build ./ --target sdl-template --config Release
  # android:
  #   name: Android Apk Build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: "temurin"
  #         java-version: "17"

  #     - name: Configure CMake
  #       run: |
  #         mkdir -p build
  #         cd build
  #         cmake ..

  #     - name: Update the build.gradle
  #       run: |
  #         cp src/build.gradle build/_deps/sdl3-src/android-project/app/

  #     - name: Build the APK
  #       run: |
  #         cd build/_deps/sdl3-src/android-project/
  #         ./gradlew assembleDebug

  #     - name: Upload the APK
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: app-debug.apk
  #         path: build/_deps/sdl3-src/android-project/app/build/outputs/apk/debug/app-debug.apk
  build-web:
    name: Web Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Get Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git --depth=1
          cd emsdk
          ./emsdk install tot
          ./emsdk activate tot
      - name: Build for web
        run: |
          source emsdk/emsdk_env.sh
          mkdir -p build
          mkdir -p build/web
          cd build/web
          emcmake cmake ../..
          cmake --build . --parallel
      - name: Prepare for upload
        run: |
          mkdir _site
          mv build/web/sdl-template.html _site/index.html
          mv build/web/sdl-* _site/
          cp -R build/web/assets _site/
      - name: Fix permissions
        run: |
          chmod -c -R +rX "_site/" | while read line; do
          echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
      - name: Upload
        uses: actions/upload-pages-artifact@v3

  # Deploy Web to GitHub Pages
  deploy:
    # Add a dependency to the build job
    needs: build-web

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or the latest "vX.X.X" version tag for this action
